# automatically generated by g-sorcery
# please do not edit this file

EAPI=8

REALNAME="${PN}"
LITERALNAME="${PN}"
REALVERSION="${PV}"
DIGEST_SOURCES="yes"
PYTHON_COMPAT=( python{3_11,3_12,3_13,3_14} )
DISTUTILS_USE_PEP517=standalone

inherit python-r1 gs-pypi

DESCRIPTION="Optimum Neuron serves as the bridge between Hugging Face libraries, such as Transformers, Diffusers, and PEFT, and AWS Trainium and Inferentia accelerators. It provides a set of tools enabling easy model loading, training, and inference on both single and multiple Neuron core configurations, across a wide range of downstream tasks."

HOMEPAGE="https://huggingface.co/docs/optimum-neuron/index"
LICENSE="Apache-2.0"
SRC_URI="https://files.pythonhosted.org/packages/source/${REALNAME::1}/${REALNAME}/${REALNAME//-/_}-${REALVERSION}.tar.gz"
SOURCEFILE="${REALNAME//-/_}-${REALVERSION}.tar.gz"
RESTRICT="test"

SLOT="0"
KEYWORDS="~amd64 ~x86"

IUSE="diffusers diffusers-tests neuron neuronx quality sentence-transformers tests training vllm vllm-tests"
DEPENDENCIES="dev-python/transformers[${PYTHON_USEDEP}]
	dev-python/accelerate[${PYTHON_USEDEP}]
	dev-python/optimum[${PYTHON_USEDEP}]
	dev-python/huggingface-hub[${PYTHON_USEDEP}]
	<=dev-python/numpy-1.26.4[${PYTHON_USEDEP}]
	<dev-python/protobuf-4.0[${PYTHON_USEDEP}]
	diffusers? ( dev-python/diffusers[${PYTHON_USEDEP}] )
	diffusers? ( dev-python/peft[${PYTHON_USEDEP}] )
	diffusers-tests? ( dev-python/compel[${PYTHON_USEDEP}] )
	neuron? ( dev-python/wheel[${PYTHON_USEDEP}] )
	neuron? ( dev-python/torch-neuron[${PYTHON_USEDEP}] )
	neuron? ( dev-python/torch[${PYTHON_USEDEP}] )
	neuron? ( dev-python/neuron-cc[${PYTHON_USEDEP}] )
	neuron? ( dev-python/protobuf[${PYTHON_USEDEP}] )
	neuron? ( dev-python/torchvision[${PYTHON_USEDEP}] )
	neuron? ( ~dev-python/numpy-1.22.3[${PYTHON_USEDEP}] )
	neuronx? ( dev-python/wheel[${PYTHON_USEDEP}] )
	neuronx? ( dev-python/neuronx-cc[${PYTHON_USEDEP}] )
	neuronx? ( dev-python/torch-neuronx[${PYTHON_USEDEP}] )
	neuronx? ( dev-python/torch[${PYTHON_USEDEP}] )
	neuronx? ( dev-python/torchvision[${PYTHON_USEDEP}] )
	neuronx? ( dev-python/neuronx-distributed[${PYTHON_USEDEP}] )
	neuronx? ( dev-python/libneuronxla[${PYTHON_USEDEP}] )
	quality? ( dev-python/pre-commit[${PYTHON_USEDEP}] )
	quality? ( dev-python/ruff[${PYTHON_USEDEP}] )
	quality? ( dev-python/isort[${PYTHON_USEDEP}] )
	sentence-transformers? ( dev-python/sentence-transformers[${PYTHON_USEDEP}] )
	tests? ( <=dev-python/pytest-8.0.0[${PYTHON_USEDEP}] )
	tests? ( dev-python/pytest-rerunfailures[${PYTHON_USEDEP}] )
	tests? ( dev-python/cloudpickle[${PYTHON_USEDEP}] )
	tests? ( dev-python/pytest-timeout[${PYTHON_USEDEP}] )
	tests? ( dev-python/pytest-forked[${PYTHON_USEDEP}] )
	tests? ( dev-python/psutil[${PYTHON_USEDEP}] )
	tests? ( dev-python/parameterized[${PYTHON_USEDEP}] )
	tests? ( dev-python/gitpython[${PYTHON_USEDEP}] )
	tests? ( dev-python/sentencepiece[${PYTHON_USEDEP}] )
	tests? ( dev-python/datasets[${PYTHON_USEDEP}] )
	tests? ( dev-python/sacremoses[${PYTHON_USEDEP}] )
	tests? ( dev-python/safetensors[${PYTHON_USEDEP}] )
	tests? ( dev-python/sentence-transformers[${PYTHON_USEDEP}] )
	tests? ( dev-python/rjieba[${PYTHON_USEDEP}] )
	tests? ( dev-python/soundfile[${PYTHON_USEDEP}] )
	tests? ( dev-python/librosa[${PYTHON_USEDEP}] )
	tests? ( dev-python/controlnet-aux[${PYTHON_USEDEP}] )
	tests? ( dev-python/TorchCodec[${PYTHON_USEDEP}] )
	training? ( dev-python/trl[${PYTHON_USEDEP}] )
	training? ( dev-python/peft[${PYTHON_USEDEP}] )
	training? ( dev-python/evaluate[${PYTHON_USEDEP}] )
	vllm? ( dev-python/vllm[${PYTHON_USEDEP}] )
	vllm-tests? ( dev-python/docker[${PYTHON_USEDEP}] )
	vllm-tests? ( dev-python/pytest-asyncio[${PYTHON_USEDEP}] )
	vllm-tests? ( dev-python/openai[${PYTHON_USEDEP}] )"
BDEPEND="${DEPENDENCIES}"
RDEPEND="${DEPENDENCIES}"
